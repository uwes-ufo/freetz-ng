--- localoptions.h
+++ localoptions.h
@@ -27,4 +27,6 @@
 #define MAX_AUTH_TRIES 2     /* limited by freetz, default 10 */
 #define AUTH_TIMEOUT 60      /* limited by freetz down to 60 seconds, default 300 */
 
+#define DEFAULT_PATH "/usr/bin:/bin:/var/bin"
+
 #endif
--- src/runopts.h
+++ src/runopts.h
@@ -146,6 +146,7 @@
 
 	int pass_on_env;
 
+	char * childProcessPATH;
 } svr_runopts;
 
 extern svr_runopts svr_opts;
--- src/svr-chansession.c
+++ src/svr-chansession.c
@@ -1014,11 +1014,7 @@
 	addnewvar("LOGNAME", ses.authstate.pw_name);
 	addnewvar("HOME", ses.authstate.pw_dir);
 	addnewvar("SHELL", get_user_shell());
-	if (getuid() == 0) {
-		addnewvar("PATH", DEFAULT_ROOT_PATH);
-	} else {
-		addnewvar("PATH", DEFAULT_PATH);
-	}
+	addnewvar("PATH", svr_opts.childProcessPATH);
 	if (cp != NULL) {
 		addnewvar("LANG", cp);
 		m_free(cp);
--- src/svr-runopts.c
+++ src/svr-runopts.c
@@ -104,6 +104,8 @@
 					"		(default port is %s if none specified)\n"
 					"-P PidFile	Create pid file PidFile\n"
 					"		(default %s)\n"
+					"-x PATH		Set PATH environment variable of child processes\n"
+					"		(default %s)\n"
 #ifdef SO_BINDTODEVICE
 					"-l <interface>\n"
 					"		interface to bind on\n"
@@ -141,6 +143,7 @@
 #endif
 					MAX_AUTH_TRIES,
 					DROPBEAR_MAX_PORTS, DROPBEAR_DEFPORT, DROPBEAR_PIDFILE,
+					DEFAULT_PATH,
 					DEFAULT_RECV_WINDOW, DEFAULT_KEEPALIVE, DEFAULT_IDLE_TIMEOUT);
 }
 
@@ -185,6 +188,7 @@
 	svr_opts.hostkey = NULL;
 	svr_opts.delay_hostkey = 0;
 	svr_opts.pidfile = expand_homedir_path(DROPBEAR_PIDFILE);
+	svr_opts.childProcessPATH = NULL;
 #if DROPBEAR_SVR_LOCALANYFWD
 	svr_opts.nolocaltcp = 0;
 #endif
@@ -287,6 +291,9 @@
 				case 'P':
 					next = &svr_opts.pidfile;
 					break;
+				case 'x':
+					next = &svr_opts.childProcessPATH;
+					break;
 #ifdef SO_BINDTODEVICE
 				case 'l':
 					next = &svr_opts.interface;
@@ -408,6 +415,10 @@
 	}
 #endif
 
+	if (svr_opts.childProcessPATH == NULL) {
+		svr_opts.childProcessPATH = DEFAULT_PATH;
+	}
+
 	if (svr_opts.bannerfile) {
 		load_banner();
 	}
