#!/bin/sh

. /etc/init.d/modlibrc
DAEMON=dsld
DAEMON_BIN=$DAEMON
DAEMON_SVC=$DAEMON
DAEMON_LONG_NAME="AVM-$DAEMON"
PID_FILE=/var/run/${DAEMON}.pid

TMPFILE="/tmp/.$DAEMON."

[ -r /etc/options.cfg ] && . /etc/options.cfg
# include environment required for daemon restart
. /bin/env.mod.rcconf avm

start() {
	echo -n "Starting ${DAEMON_LONG_NAME} ... "

	# handle daemon start not by this script but by supervisor, if available
	if [ -f "/lib/systemd/system/${DAEMON_SVC}.service" ] && ! modlib_check_supervisor; then
		# Caution this can cause an endless loop, which will make supervisor crash.
		# Always make sure, in service-file, that this script gets called directly or,  if a script chain
		# is needed (like .rc-wrapper), the chain calls every following script/binary with "exec" command.
		svctl start $DAEMON_SVC &> /dev/null
		echo 'by svctl.'
		exit
	fi

	if [ -e ${TMPFILE}CMD ]; then
		DAEMON_CMD="$(cat ${TMPFILE}CMD)"
	else
		if [ "$FREETZ_AVMDAEMON_DISABLE_IGD" == "y" ]; then
			DAEMON_CMD=" $($DAEMON_BIN -? 2>&1 | sed -nr 's/^[ \t]*([^ ]*).*igd.*/\1/p')"
		fi
		DAEMON_CMD=" -i$DAEMON_CMD"
		echo "$DAEMON_CMD" > ${TMPFILE}CMD
	fi

	if [ -e ${TMPFILE}OPT ]; then
		DAEMON_OPT="$(cat ${TMPFILE}OPT)"
	else
		DAEMON_OPT=" -n"
		[ "$CONFIG_RAMSIZE" == "8" ] && DAEMON_OPT="$DAEMON_OPT -N -r 600"
		echo "$DAEMON_OPT" > ${TMPFILE}OPT
	fi

	# dsld could not start without eth0
	local countdown=20
	while [ $((countdown--)) -gt 0 ] && ! ifconfig eth0 > /dev/null 2>&1; do
		sleep 1
	done

	#remove duplicate arguments
	DAEMON_ARGS="$(for arg in $DAEMON_CMD $DAEMON_OPT; do [ "$arg" != "dsld" ] && echo " $arg"; done |sort -u)"
	if [ -f "/lib/systemd/system/${DAEMON_SVC}.service" ]; then
		# Don't use a subshell, like "(...code...) &", here.
		# It will produce a zombie process once "exec" gets executed
		sh -c "\
			$0 start_postexec; \
			echo 'by svctl.' \
		" &

		exec $DAEMON_BIN $DAEMON_ARGS 2>/dev/null
		exitval=$?  # Never reached, as long as exec (not the command) isn't failing
	else
		$DAEMON_BIN $DAEMON_ARGS 2>/dev/null
		exitval=$?
	fi
	if [ "$exitval" -eq 0 ]; then
		start_postexec
		echo 'done.'
	else
		echo 'failed.'
		exit $exitval
	fi
}

start_postexec() {
	sleep 1
}

stop() {
	[ -e ${TMPFILE}OPT ] || echo " -n" > ${TMPFILE}OPT
	#save current arguments
	local DAEMON_PID=$(cat $PID_FILE 2>/dev/null)
	if [ -n "$DAEMON_PID" ]; then
		for arg in $(xargs -0 < /proc/${DAEMON_PID}/cmdline); do grep -q " $arg" ${TMPFILE}OPT 2>/dev/null || echo " $arg"; done > ${TMPFILE}CMD
	fi
	$DAEMON_BIN -s
}

reload() {
	local ret
	if [ -f "/lib/systemd/system/${DAEMON_SVC}.service" ]; then
		msgsend -a $DAEMON reload
		ret=$?
	else
		$DAEMON_BIN -I
		ret=$?
	fi
	return $ret
}

set_options() {
	DAEMON_OPT_NEW=" $*"
	if [ " $(cat ${TMPFILE}OPT 2>/dev/null)" != "$DAEMON_OPT_NEW" ]; then
		DAEMON_STATUS="$(modlib_status)"
		[ "$DAEMON_STATUS" != "stopped" ] && modlib_stop
		echo "$DAEMON_OPT_NEW" > ${TMPFILE}OPT
		[ "$DAEMON_STATUS" != "stopped" ] && modlib_start
	else
		modlib_reload
	fi
}

case $1 in
	""|load)
		modreg pkg $DAEMON "$DAEMON_LONG_NAME"
		modreg daemon -p avm $DAEMON
		;;
	unload)
		modunreg daemon avm $DAEMON
		modunreg pkg $DAEMON
		;;
	start)
		modlib_start
		;;
	start_postexec)
		start_postexec
		;;
	stop)
		modlib_stop
		;;
	restart)
		modlib_restart
		;;
	reload)
		modlib_reload
		;;
	status)
		modlib_status
		;;
	set_options)
		$*
		;;
	*)
		echo "Usage: $0 [start|stop|restart|reload|status|set_options [dsld-options]]" 1>&2
		exit 1
		;;
esac

exit 0
