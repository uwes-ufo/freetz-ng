#!/bin/sh

DAEMON=rextd
DAEMON_BIN=$DAEMON
DAEMON_SVC=$DAEMON
DAEMON_LONG_NAME="AVM-$DAEMON"
CONF_NAME=avm
. /etc/init.d/modlibrc

TMPFILE="/tmp/.$DAEMON."

[ -r /etc/options.cfg ] && . /etc/options.cfg
# include environment required for daemon restart
. /bin/env.mod.rcconf avm

start() {
	echo -n "Starting ${DAEMON_LONG_NAME} ... "

	# handle daemon start not by this script but by supervisor, if available
	if [ -f "/lib/systemd/system/${DAEMON_SVC}.service" ] && ! modlib_check_supervisor; then
		# Caution this can cause an endless loop, which will make supervisor crash.
		# Always make sure, in service-file, that this script gets called directly or,  if a script chain
		# is needed (like .rc-wrapper), the chain calls every following script/binary with "exec" command.
		svctl start $DAEMON_SVC &> /dev/null
		echo 'by svctl.'
		exit
	fi

	#save ipv6 for 'lan' (since fw 04.86)
	if [ -e /proc/sys/net/ipv6/conf/lan/disable_ipv6 ]; then
		ifconfig lan | sed -rn 's/.*inet6 addr: (.*) Scope:Global/\1/p' > ${TMPFILE}addresses_ipv6_lan
		cat /proc/sys/net/ipv6/conf/lan/disable_ipv6                    > ${TMPFILE}disable_ipv6_lan
	fi

	local use_preload="n"
	rm -rf /var/tmp/avm-resolv.conf /var/tmp/resolv.conf 2>/dev/null
	if [ "$FREETZ_AVMDAEMON_DISABLE_MULTIDPORTS" == "y" ]; then
		local _resolv_conf_dns="$(modconf value MOD_RESOLV_DNS mod 2>/dev/null)"
		local _bind_enabled="$(modconf value BIND_ENABLED bind 2>/dev/null)"
		local _dnsmasq_enabled="$(modconf value DNSMASQ_ENABLED dnsmasq 2>/dev/null)"
		local _dnsmasq_port="$(modconf value DNSMASQ_DNS_PORT dnsmasq 2>/dev/null)"
		local _dnsmasq_dns_enabled=$([ "$_dnsmasq_enabled" = yes -a "$_dnsmasq_port" -eq 53 ] 2>/dev/null && echo yes || echo no)
		local _unbound_enabled="$(modconf value UNBOUND_ENABLED unbound 2>/dev/null)"
		if [ "$_resolv_conf_dns" == "127.0.0.1" -a "$_bind_enabled" != yes -a "$_dnsmasq_dns_enabled" != yes -a "$_unbound_enabled" != yes ]; then
			echo -n "discarded libmultid, no enabled dns server ... "
		else
			use_preload="y"
		fi
	fi
	if [ -f "/lib/systemd/system/${DAEMON_SVC}.service" ]; then
		# Don't use a subshell, like "(...code...) &", here.
		# It will produce a zombie process once "exec" gets executed
		sh -c "\
			$0 start_postexec; \
			echo 'by svctl.' \
		" &

		[ "$use_preload" == "y" ] && export LD_PRELOAD=libmultid.so
		exec $DAEMON_BIN -v 2>/dev/null
		exitval=$?  # Never reached, as long as exec (not the command) isn't failing
	else
		[ "$use_preload" == "y" ] && export LD_PRELOAD=libmultid.so
		$DAEMON_BIN -v 2>/dev/null
		exitval=$?
	fi
	unset LD_PRELOAD

	if [ "$exitval" -eq 0 ]; then
		start_postexec
		echo 'done.'
	else
		echo 'failed.'
		exit $exitval
	fi
}

start_postexec() {
	sleep 1
	[ -f /tmp/flash/mod/multid.start ] && . /tmp/flash/mod/multid.start

	#load ipv6 for 'lan' (since fw 04.86)
	local disable_ipv6_lan="$(cat ${TMPFILE}disable_ipv6_lan 2>/dev/null)"
	if [ -n "$disable_ipv6_lan" ]; then
		if [ "$(cat /proc/sys/net/ipv6/conf/lan/disable_ipv6)" != "$disable_ipv6_lan" ]; then
			ifconfig lan down
			echo $disable_ipv6_lan > /proc/sys/net/ipv6/conf/lan/disable_ipv6
			ifconfig lan up
		fi
		for address_ipv6_lan in $(cat ${TMPFILE}addresses_ipv6_lan 2>/dev/null); do
			ifconfig lan add $address_ipv6_lan 2>/dev/null
		done
	fi

	# do we have another local dns-sever? the daemon doesn't create /var/tmp/avm-resolv.conf itself if port 53 is in use.
	# some (older?) boxes uses /var/tmp/resolv.conf for upstream-dnsserver.
	for resolv_file in /var/tmp/avm-resolv.conf /var/tmp/resolv.conf; do
		[ ! -e $resolv_file ] && echo "nameserver 127.0.0.1" > $resolv_file
	done
}

stop() {
	$DAEMON_BIN -s
}

reload() {
	local ret
	if [ -f "/lib/systemd/system/${DAEMON_SVC}.service" ]; then
		msgsend -a $DAEMON reload
		ret=$?
	else
		$DAEMON_BIN -I
		ret=$?
	fi
	return $ret
}

case $1 in
	""|load)
		modreg pkg $DAEMON "$DAEMON_LONG_NAME"
		modreg daemon -p avm $DAEMON
		;;
	unload)
		modunreg daemon avm $DAEMON
		modunreg pkg $DAEMON
		;;
	start)
		modlib_start
		;;
	start_postexec)
		start_postexec
		;;
	stop)
		modlib_stop
		;;
	restart)
		modlib_restart
		;;
	reload)
		modlib_reload
		;;
	status)
		modlib_status
		;;
	*)
		echo "Usage: $0 [start|stop|restart|reload|status]" 1>&2
		exit 1
		;;
esac

exit 0
